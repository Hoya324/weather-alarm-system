package com.weather.alarm.batch.notification.processor

import com.weather.alarm.batch.dto.NotificationItem
import com.weather.alarm.batch.dto.ProcessedNotificationItem
import com.weather.alarm.domain.weather.type.WeatherCondition
import org.slf4j.LoggerFactory
import org.springframework.batch.item.ItemProcessor
import org.springframework.stereotype.Component
import java.time.format.DateTimeFormatter

@Component
class NotificationItemProcessor : ItemProcessor<NotificationItem, ProcessedNotificationItem> {

    private val logger = LoggerFactory.getLogger(NotificationItemProcessor::class.java)

    override fun process(item: NotificationItem): ProcessedNotificationItem? {
        try {
            if (!item.shouldSend) {
                logger.debug("ÏïåÎ¶º Ï°∞Í±¥ Î∂àÎßåÏ°±ÏúºÎ°ú Í±¥ÎÑàÎúÄ: userId=${item.notificationInfo.user.id}")
                return null
            }

            val notificationInfo = item.notificationInfo
            val weatherInfo = item.weatherInfo

            val message = buildSlackMessage(notificationInfo, weatherInfo)

            logger.debug("ÏïåÎ¶º Î©îÏãúÏßÄ ÏÉùÏÑ± ÏôÑÎ£å: userId=${notificationInfo.user.id}")

            return ProcessedNotificationItem(
                webhookUrl = notificationInfo.slackWebHookUrl,
                message = message,
                userId = notificationInfo.user.id,
                notificationId = notificationInfo.id
            )
        } catch (e: Exception) {
            logger.error("ÏïåÎ¶º Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: userId=${item.notificationInfo.user.id}", e)
            return null
        }
    }

    private fun buildSlackMessage(
        notificationInfo: com.weather.alarm.domain.notification.entity.NotificationInfo,
        weatherInfo: com.weather.alarm.domain.weather.entity.WeatherInfo
    ): String {
        val address = notificationInfo.address
        val date = weatherInfo.weatherDate.format(DateTimeFormatter.ofPattern("MMÏõî ddÏùº"))
        val notificationType = when (notificationInfo.notificationType) {
            com.weather.alarm.domain.notification.type.NotificationType.DAILY -> "ÏùºÏùº ÎÇ†Ïî®"
            com.weather.alarm.domain.notification.type.NotificationType.WEATHER -> "ÎÇ†Ïî® Ï°∞Í±¥ ÏïåÎ¶º"
            com.weather.alarm.domain.notification.type.NotificationType.TEMPERATURE -> "Ïò®ÎèÑ Ï°∞Í±¥ ÏïåÎ¶º"
        }

        val sb = StringBuilder()
        sb.append("üå§Ô∏è *${address} ${notificationType}* (${date})\n\n")

        // ÏïåÎ¶º ÌÉÄÏûÖÎ≥Ñ Ï°∞Í±¥ ÌëúÏãú
        when (notificationInfo.notificationType) {
            com.weather.alarm.domain.notification.type.NotificationType.TEMPERATURE -> {
                notificationInfo.temperatureThreshold?.let { threshold ->
                    weatherInfo.temperature?.let { temp ->
                        if (temp <= threshold) {
                            sb.append("üö® **Ïò®ÎèÑ ÏïåÎ¶º**: ÏÑ§Ï†ï Ïò®ÎèÑ(${threshold}¬∞C) Ïù¥ÌïòÏûÖÎãàÎã§!\n\n")
                        }
                    }
                }
            }

            com.weather.alarm.domain.notification.type.NotificationType.WEATHER -> {
                val weatherTypes = notificationInfo.getWeatherTypesList()
                if (weatherTypes.isNotEmpty()) {
                    weatherInfo.weatherCondition?.let { condition ->
                        if (weatherTypes.contains(condition.name)) {
                            sb.append("üö® **ÎÇ†Ïî® ÏïåÎ¶º**: ÏÑ§Ï†ïÌïú ÎÇ†Ïî® Ï°∞Í±¥(${getWeatherDescription(condition)})Ïù¥ Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§!\n\n")
                        }
                    }
                }

                if (weatherInfo.isWeatherAlert()) {
                    sb.append("üö® **ÎÇ†Ïî® Í≤ΩÎ≥¥**: Ï£ºÏùòÍ∞Ä ÌïÑÏöîÌïú ÎÇ†Ïî®ÏûÖÎãàÎã§!\n\n")
                }
            }

            com.weather.alarm.domain.notification.type.NotificationType.DAILY -> {
                // ÏùºÎ∞ò Ïù∏ÏÇ¨Îßê
            }
        }

        weatherInfo.temperature?.let { temp ->
            sb.append("üå°Ô∏è **ÌòÑÏû¨ Ïò®ÎèÑ**: ${temp.toInt()}¬∞C")

            // Ï≤¥Í∞êÏò®ÎèÑ
            weatherInfo.getFeelsLikeTemperature()?.let { feelsLike ->
                if (feelsLike != temp) {
                    sb.append(" (Ï≤¥Í∞ê ${feelsLike.toInt()}¬∞C)")
                }
            }
            sb.append("\n")
        }

        // ÏµúÏ†Ä/ÏµúÍ≥† Ïò®ÎèÑ
        if (weatherInfo.temperatureMin != null || weatherInfo.temperatureMax != null) {
            sb.append("üìä **Ïò®ÎèÑ Î≤îÏúÑ**: ")
            weatherInfo.temperatureMin?.let { min -> sb.append("ÏµúÏ†Ä ${min.toInt()}¬∞C") }
            if (weatherInfo.temperatureMin != null && weatherInfo.temperatureMax != null) {
                sb.append(" / ")
            }
            weatherInfo.temperatureMax?.let { max -> sb.append("ÏµúÍ≥† ${max.toInt()}¬∞C") }
            sb.append("\n")
        }

        // ÎÇ†Ïî® ÏÉÅÌÉú
        weatherInfo.weatherCondition?.let { condition ->
            val emoji = getWeatherEmoji(condition)
            val description = getWeatherDescription(condition)
            sb.append("‚òÅÔ∏è **ÎÇ†Ïî®**: ${emoji} ${description}\n")
        }

        // Í∞ïÏàò Ï†ïÎ≥¥
        weatherInfo.precipitationProbability?.let { probability ->
            sb.append("‚òî **Í∞ïÏàòÌôïÎ•†**: ${probability}%")
            weatherInfo.precipitation?.let { precipitation ->
                if (precipitation > 0) {
                    sb.append(" (${precipitation}mm)")
                }
            }
            sb.append("\n")
        }

        // ÏäµÎèÑ
        weatherInfo.humidity?.let { humidity ->
            sb.append("üíß **ÏäµÎèÑ**: ${humidity}%\n")
        }

        // Î∞îÎûå
        weatherInfo.windSpeed?.let { windSpeed ->
            sb.append("üí® **Î∞îÎûå**: ${windSpeed}m/s")
            weatherInfo.windDirection?.let { direction ->
                sb.append(" ${direction}")
            }
            sb.append("\n")
        }

        // Ï∂îÍ∞Ä Í≤ΩÍ≥† Î©îÏãúÏßÄ (DAILY ÌÉÄÏûÖÏóêÏÑúÎßå ÌëúÏãú)
        if (notificationInfo.notificationType == com.weather.alarm.domain.notification.type.NotificationType.DAILY && weatherInfo.isWeatherAlert()) {
            sb.append("\n‚ö†Ô∏è **ÎÇ†Ïî® Í≤ΩÎ≥¥**\n")

            weatherInfo.precipitationProbability?.let { prob ->
                if (prob >= 70) sb.append("‚Ä¢ ÎÜíÏùÄ Í∞ïÏàòÌôïÎ•† (${prob}%)\n")
            }

            weatherInfo.windSpeed?.let { wind ->
                if (wind >= 15.0) sb.append("‚Ä¢ Í∞ïÌíç Ï£ºÏùò (${wind}m/s)\n")
            }

            weatherInfo.temperature?.let { temp ->
                when {
                    temp <= 0 -> sb.append("‚Ä¢ ÌïúÌåå Ï£ºÏùò (${temp.toInt()}¬∞C)\n")
                    temp >= 35 -> sb.append("‚Ä¢ Ìè≠Ïóº Ï£ºÏùò (${temp.toInt()}¬∞C)\n")
                    else -> {}
                }
            }

            weatherInfo.uvIndex?.let { uv ->
                if (uv >= 8) sb.append("‚Ä¢ ÎÜíÏùÄ ÏûêÏô∏ÏÑ† ÏßÄÏàò (${uv})\n")
            }
        }

        // Ïô∏Ï∂ú Ï∂îÏ≤ú Ï†ïÎ≥¥
        if (weatherInfo.isGoodWeatherForOutdoor()) {
            sb.append("\n‚ú® **Ïô∏Ï∂úÌïòÍ∏∞ Ï¢ãÏùÄ ÎÇ†Ïî®ÏûÖÎãàÎã§!**")
        }

        return sb.toString()
    }

    private fun getWeatherEmoji(condition: WeatherCondition): String {
        return when (condition) {
            WeatherCondition.CLEAR -> "‚òÄÔ∏è"
            WeatherCondition.PARTLY_CLOUDY -> "‚õÖ"
            WeatherCondition.CLOUDY -> "‚òÅÔ∏è"
            WeatherCondition.LIGHT_RAIN -> "üå¶Ô∏è"
            WeatherCondition.HEAVY_RAIN -> "üåßÔ∏è"
            WeatherCondition.SNOW -> "üå®Ô∏è"
            WeatherCondition.SLEET -> "üå®Ô∏è"
            WeatherCondition.THUNDERSTORM -> "‚õàÔ∏è"
            WeatherCondition.FOG -> "üå´Ô∏è"
            WeatherCondition.WIND -> "üí®"
        }
    }

    private fun getWeatherDescription(condition: WeatherCondition): String {
        return when (condition) {
            WeatherCondition.CLEAR -> "ÎßëÏùå"
            WeatherCondition.PARTLY_CLOUDY -> "Íµ¨Î¶ÑÎßéÏùå"
            WeatherCondition.CLOUDY -> "ÌùêÎ¶º"
            WeatherCondition.LIGHT_RAIN -> "ÎπÑ"
            WeatherCondition.HEAVY_RAIN -> "ÎßéÏùÄ ÎπÑ"
            WeatherCondition.SNOW -> "Îàà"
            WeatherCondition.SLEET -> "ÏßÑÎààÍπ®ÎπÑ"
            WeatherCondition.THUNDERSTORM -> "Ï≤úÎë•Î≤àÍ∞ú"
            WeatherCondition.FOG -> "ÏïàÍ∞ú"
            WeatherCondition.WIND -> "Í∞ïÌíç"
        }
    }
}
