name: Deploy Outside Weather to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EC2_REGION: ap-northeast-2
  ECR_REGISTRY: public.ecr.aws
  ECR_REPOSITORY: j8w6n7e6/gittree/gittree-ecr-repo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon Public ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and push Docker images
        id: build
        run: |
          IMAGE_TAG="production-${{ github.run_number }}"
          API_IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:api-${IMAGE_TAG}
          BATCH_IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:batch-${IMAGE_TAG}
          
          echo "🔨 Building API Docker image..."
          docker build -f Dockerfile.api -t ${API_IMAGE_URI} .
          
          echo "🔨 Building Batch Docker image..."
          docker build -f Dockerfile.batch -t ${BATCH_IMAGE_URI} .
          
          echo "📤 Pushing API image to ECR..."
          docker push ${API_IMAGE_URI}
          
          echo "📤 Pushing Batch image to ECR..."
          docker push ${BATCH_IMAGE_URI}
          
          # Also tag as latest
          docker tag ${API_IMAGE_URI} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:api-latest
          docker tag ${BATCH_IMAGE_URI} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:batch-latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:api-latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:batch-latest
          
          echo "✅ Images pushed successfully"
          echo "API: ${API_IMAGE_URI}"
          echo "Batch: ${BATCH_IMAGE_URI}"
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Clean up local images
        run: |
          echo "🧹 Cleaning up local build artifacts..."
          docker image prune -f
          docker builder prune -f

  deploy:
    needs: [ build-and-push ]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials for EC2
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.EC2_REGION }}

      - name: Copy configuration files to EC2
        run: |
          echo "📁 Preparing configuration files..."
          
          # docker-compose.yml을 base64로 인코딩
          DOCKER_COMPOSE_CONTENT=$(base64 -w 0 < docker/docker-compose.yml)
          
          # nginx 설정 파일들을 base64로 인코딩
          NGINX_CONF_CONTENT=$(base64 -w 0 < nginx/conf.d/default.conf)
          NGINX_NO_SSL_CONTENT=$(base64 -w 0 < nginx/conf.d/nginx.no-ssl.conf)
          
          # 환경변수로 설정
          echo "DOCKER_COMPOSE_CONTENT=$DOCKER_COMPOSE_CONTENT" >> $GITHUB_ENV
          echo "NGINX_CONF_CONTENT=$NGINX_CONF_CONTENT" >> $GITHUB_ENV
          echo "NGINX_NO_SSL_CONTENT=$NGINX_NO_SSL_CONTENT" >> $GITHUB_ENV

      - name: Deploy to EC2
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
        run: |
          echo "🚀 Starting deployment to production..."
          echo "📦 Using image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
          echo "🎯 Target instance: ${{ secrets.EC2_INSTANCE_ID }}"
          
          export ECR_REGISTRY="${{ env.ECR_REGISTRY }}"
          export ECR_REPOSITORY="${{ env.ECR_REPOSITORY }}"
          export EC2_REGION="${{ env.EC2_REGION }}"
          export IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          export DOCKER_COMPOSE_CONTENT="${{ env.DOCKER_COMPOSE_CONTENT }}"
          export NGINX_CONF_CONTENT="${{ env.NGINX_CONF_CONTENT }}"
          export NGINX_NO_SSL_CONTENT="${{ env.NGINX_NO_SSL_CONTENT }}"
          
          chmod +x scripts/deploy_script.sh
          ./scripts/deploy_script.sh "${{ secrets.EC2_INSTANCE_ID }}"

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          sleep 30

          # Check if the application is responding
          if curl -f -s --max-time 30 "https://git-tree.com/actuator/health" > /dev/null; then
            echo "✅ Application is responding on https://git-tree.com"
          else
            echo "⚠️ Application health check via HTTPS failed, trying HTTP..."
            if curl -f -s --max-time 30 "http://git-tree.com/actuator/health" > /dev/null; then
              echo "✅ Application is responding on http://git-tree.com"
            else
              echo "⚠️ Application health check failed, but deployment may still be starting up"
            fi
          fi

  notification:
    needs: [ build-and-push, deploy ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Deployment notification
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 Deployment to production successful!"
            echo "🌐 Application URL: https://git-tree.com"
            echo "📦 Deployed image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
            echo "🔨 Build number: ${{ github.run_number }}"
          else
            echo "❌ Deployment to production failed!"
            echo "📋 Check the deployment logs for details"
            exit 1
          fi
